//Sorular ve Cevaplar;

// Soru 3 : “Yazılım” veya “Donanım” birimlerinde çalışanların ad, soyad ve maaş bilgilerini listeleyen SQL sorgusunu yazınız. (Tek bir sorgu ile)

SELECT c.ad, c.soyad, c.maas
FROM calisanlar AS c
INNER JOIN birimler AS b ON c.calisan_birim_id = b.birim_id
WHERE b.birim_ad IN ('Yazılım', 'Donanım');


// Soru 4 : Maaşı en yüksek olan çalışanların ad, soyad ve maaş bilgilerini listeleyen SQL sorgusunu yazınız. (Tek bir sorgu ile)

SELECT ad, soyad, maas
FROM calisanlar
WHERE maas = (SELECT MAX(maas) FROM calisanlar);


// Soru 5 : Birimlerin her birinde kaç adet çalışan olduğunu ve birimlerin isimlerini listeleyen sorguyu yazınız. (Tek bir sorgu ile) (Örneğin; x biriminde 3
çalışan var gibi düşünebilirsiniz.) (Gruplamalı sorgu ile)


SELECT b.birim_ad, COUNT(c.calisan_id) AS calisan_sayisi
FROM birimler AS b
LEFT JOIN calisanlar AS c ON b.birim_id = c.calisan_birim_id
GROUP BY b.birim_ad;


// Soru 6 : Birden fazla çalışana ait olan unvanların isimlerini ve o unvan altında çalışanların sayısını listeleyen sorguyu yazınız. (Tek bir sorgu ile)


SELECT u.unvan_calisan AS unvan, COUNT(u.unvan_calisan_id) AS calisan_sayisi
FROM unvan AS u
GROUP BY u.unvan_calisan
HAVING COUNT(u.unvan_calisan_id) > 1;

// Soru 7 : Maaşları “50000” ve “100000” arasında değişen çalışanların ad, soyad ve maaş bilgilerini listeleyen sorguyu yazınız. (Tek bir sorgu ile)

SELECT ad, soyad, maas
FROM calisanlar
WHERE maas BETWEEN 50000 AND 100000;


// Soru 8 : İkramiye hakkına sahip çalışanlara ait ad, soyad, birim, unvan ve ikramiye ücreti bilgilerini listeleyen sorguyu yazınız. (Tek bir sorgu ile)

SELECT c.ad, c.soyad, b.birim_ad, u.unvan_calisan, i.ikramiye_ucret
FROM ikramiye AS i
INNER JOIN calisanlar AS c ON i.ikramiye_calisan_id = c.calisan_id
INNER JOIN birimler AS b ON c.calisan_birim_id = b.birim_id
INNER JOIN unvan AS u ON c.calisan_id = u.unvan_calisan_id;


// Soru 9 : Ünvanı “Yönetici” ve “Müdür” olan çalışanların ad, soyad ve ünvanlarını listeleyen sorguyu yazınız. (Tek bir sorgu ile)

SELECT c.ad, c.soyad, u.unvan_calisan
FROM unvan AS u
INNER JOIN calisanlar AS c ON u.unvan_calisan_id = c.calisan_id
WHERE u.unvan_calisan IN ('Yönetici', 'Müdür');


// Soru 10 : Her bir birimde en yüksek maaş alan çalışanların ad, soyad ve maaş bilgilerini listeleyen sorguyu yazınız. (Tek bir sorgu ile)

SELECT c.ad, c.soyad, c.maas
FROM calisanlar AS c
WHERE c.maas IN (
    SELECT MAX(c1.maas)
    FROM calisanlar AS c1
    GROUP BY c1.calisan_birim_id
);
















// Birim Tablosuna Veri Eklemek İçin;

INSERT INTO birimler (birim_id, birim_ad) VALUES
(1, 'Yazılım'),
(2, 'Donanım'),
(3, 'Güvenlik');


// Çalışan Tablosuna Veri Eklemek İçin;

INSERT INTO calisanlar (calisan_id, ad, soyad, maas, katilmaTarihi, calisan_birim_id) VALUES
(1, 'İsmail', 'İçeri', 100000, '2014-02-20', 1),
(2, 'Hami', 'Satılmış', 80000, '2014-06-11', 1),
(3, 'Dumuş', 'Şahin', 300000, '2014-02-20', 2),
(4, 'Kağan', 'Yazar', 500000, '2014-02-20', 3),
(5, 'Meryem', 'Soysaldı', 500000, '2014-06-11', 3),
(6, 'Duygu', 'Akşehir', 200000, '2014-06-11', 2),
(7, 'Kübra', 'Seyhan', 75000, '2014-01-20', 1),
(8, 'Gülcan', 'Yıldız', 90000, '2014-04-11', 3);


// İkramiye Tablosuna Veri Eklemek İçin;

INSERT INTO ikramiye (ikramiye_calisan_id, ikramiye_ucret, ikramiye_tarih) VALUES
(1, 5000, '2016-02-20'),
(2, 3000, '2016-06-11'),
(3, 4000, '2016-02-20'),
(1, 4500, '2016-02-20'),
(2, 3500, '2016-06-11');

// Unvan Tablosuna Veri Eklemek İçin;

INSERT INTO unvan (unvan_calisan_id, unvan_calisan, unvan_tarih) VALUES
(1, 'Yönetici', '2016-02-20'),
(2, 'Personel', '2016-06-11'),
(3, 'Personel', '2016-06-11'),
(4, 'Müdür', '2016-06-11'),
(5, 'Yönetici Yardımcısı', '2016-06-11'),
(6, 'Personel', '2016-06-11'),
(7, 'Takım Lideri', '2016-06-11'),
(8, 'Takım Lideri', '2016-06-11');





//Calisanlar adlı veritabanını oluşturmak için.

create database Calisanlar;


//birim_id = int , (primary key) , not null ve birim_ad = char(25) , not null olacak şekilde  birimler tablosunu oluşturmak için ;


CREATE TABLE birimler (
    birim_id INT PRIMARY KEY NOT NULL,
    birim_ad CHAR(25) NOT NULL
);

// Calisanlar tablosunu sütun ve veri tipleri uygun olacak şekilde oluşturmak ve calisan_birim_id ' yi birimler.birim_id ile ilişkilendirmek için ;
CREATE TABLE calisanlar (
    calisan_id INT PRIMARY KEY NOT NULL,
    ad CHAR(25) NULL,
    soyad CHAR(25) NULL,
    maas INT NULL,
    katilmaTarihi DATETIME NULL,
    calisan_birim_id INT NOT NULL,
    FOREIGN KEY (calisan_birim_id) REFERENCES birimler(birim_id)
);

// İkramiye tablosunu oluşturmak  ve ikramiye_calisan_id ile calisanlar.calisan_id ilişkilendirmek için ;

CREATE TABLE ikramiye (
    ikramiye_calisan_id INT NOT NULL,
    ikramiye_ucret INT NULL,
    ikramiye_tarih DATETIME NULL,
    FOREIGN KEY (ikramiye_calisan_id) REFERENCES calisanlar(calisan_id)
);


// Unvan tablosunu oluşturmak ve unvan_calisan_id ' yi calisanlar.calisan_id ile ilişkilendirmek için ;

CREATE TABLE unvan (
    unvan_calisan_id INT NOT NULL, 
    unvan_calisan CHAR(25) NULL, 
    unvan_tarih DATETIME NULL, 
    FOREIGN KEY (unvan_calisan_id) REFERENCES calisanlar(calisan_id)
);

